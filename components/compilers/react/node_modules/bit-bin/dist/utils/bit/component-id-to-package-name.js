"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = componentIdToPackageName;

function _npmRegistryName() {
  const data = _interopRequireDefault(require("./npm-registry-name"));

  _npmRegistryName = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../../constants");

  _constants = function () {
    return data;
  };

  return data;
}

/**
 * convert a component name to a valid npm package name
 * e.g. BitId { scope: util, name: is-string } => @bit/util.is-string
 */
function componentIdToPackageName(id, bindingPrefix, defaultScope, // if an id doesn't have a scope, use defaultScope if exists
withPrefix = true) {
  const allSlashes = new RegExp('/', 'g');
  const name = id.name.replace(allSlashes, _constants().NODE_PATH_COMPONENT_SEPARATOR);
  const scope = id.scope || defaultScope;
  const partsToJoin = scope ? [scope, name] : [name];
  const nameWithoutPrefix = partsToJoin.join(_constants().NODE_PATH_COMPONENT_SEPARATOR);
  if (!withPrefix) return nameWithoutPrefix;
  const registryPrefix = bindingPrefix || (0, _npmRegistryName().default)();
  return `${registryPrefix}/${nameWithoutPrefix}`;
}